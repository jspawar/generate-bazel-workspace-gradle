// Code generated by counterfeiter. DO NOT EDIT.
package mavenfakes

import (
	"sync"

	"github.com/jspawar/generate-bazel-workspace-gradle/maven"
)

type FakeRemoteRepository struct {
	FetchRemoteArtifactStub        func(artifact *maven.Artifact, remoteRepository string) (*maven.Artifact, error)
	fetchRemoteArtifactMutex       sync.RWMutex
	fetchRemoteArtifactArgsForCall []struct {
		artifact         *maven.Artifact
		remoteRepository string
	}
	fetchRemoteArtifactReturns struct {
		result1 *maven.Artifact
		result2 error
	}
	fetchRemoteArtifactReturnsOnCall map[int]struct {
		result1 *maven.Artifact
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRemoteRepository) FetchRemoteArtifact(artifact *maven.Artifact, remoteRepository string) (*maven.Artifact, error) {
	fake.fetchRemoteArtifactMutex.Lock()
	ret, specificReturn := fake.fetchRemoteArtifactReturnsOnCall[len(fake.fetchRemoteArtifactArgsForCall)]
	fake.fetchRemoteArtifactArgsForCall = append(fake.fetchRemoteArtifactArgsForCall, struct {
		artifact         *maven.Artifact
		remoteRepository string
	}{artifact, remoteRepository})
	fake.recordInvocation("FetchRemoteArtifact", []interface{}{artifact, remoteRepository})
	fake.fetchRemoteArtifactMutex.Unlock()
	if fake.FetchRemoteArtifactStub != nil {
		return fake.FetchRemoteArtifactStub(artifact, remoteRepository)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchRemoteArtifactReturns.result1, fake.fetchRemoteArtifactReturns.result2
}

func (fake *FakeRemoteRepository) FetchRemoteArtifactCallCount() int {
	fake.fetchRemoteArtifactMutex.RLock()
	defer fake.fetchRemoteArtifactMutex.RUnlock()
	return len(fake.fetchRemoteArtifactArgsForCall)
}

func (fake *FakeRemoteRepository) FetchRemoteArtifactArgsForCall(i int) (*maven.Artifact, string) {
	fake.fetchRemoteArtifactMutex.RLock()
	defer fake.fetchRemoteArtifactMutex.RUnlock()
	return fake.fetchRemoteArtifactArgsForCall[i].artifact, fake.fetchRemoteArtifactArgsForCall[i].remoteRepository
}

func (fake *FakeRemoteRepository) FetchRemoteArtifactReturns(result1 *maven.Artifact, result2 error) {
	fake.FetchRemoteArtifactStub = nil
	fake.fetchRemoteArtifactReturns = struct {
		result1 *maven.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoteRepository) FetchRemoteArtifactReturnsOnCall(i int, result1 *maven.Artifact, result2 error) {
	fake.FetchRemoteArtifactStub = nil
	if fake.fetchRemoteArtifactReturnsOnCall == nil {
		fake.fetchRemoteArtifactReturnsOnCall = make(map[int]struct {
			result1 *maven.Artifact
			result2 error
		})
	}
	fake.fetchRemoteArtifactReturnsOnCall[i] = struct {
		result1 *maven.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchRemoteArtifactMutex.RLock()
	defer fake.fetchRemoteArtifactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRemoteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ maven.RemoteRepository = new(FakeRemoteRepository)
