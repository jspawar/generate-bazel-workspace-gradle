// Code generated by counterfeiter. DO NOT EDIT.
package mavenfakes

import (
	"sync"

	"github.com/jspawar/generate-bazel-workspace-gradle/maven"
)

type FakeRemoteRepository struct {
	FetchRemoteModelStub        func(artifact *maven.Artifact, remoteRepository string) (*maven.Artifact, error)
	fetchRemoteModelMutex       sync.RWMutex
	fetchRemoteModelArgsForCall []struct {
		artifact         *maven.Artifact
		remoteRepository string
	}
	fetchRemoteModelReturns struct {
		result1 *maven.Artifact
		result2 error
	}
	fetchRemoteModelReturnsOnCall map[int]struct {
		result1 *maven.Artifact
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRemoteRepository) FetchRemoteModel(artifact *maven.Artifact, remoteRepository string) (*maven.Artifact, error) {
	fake.fetchRemoteModelMutex.Lock()
	ret, specificReturn := fake.fetchRemoteModelReturnsOnCall[len(fake.fetchRemoteModelArgsForCall)]
	fake.fetchRemoteModelArgsForCall = append(fake.fetchRemoteModelArgsForCall, struct {
		artifact         *maven.Artifact
		remoteRepository string
	}{artifact, remoteRepository})
	fake.recordInvocation("FetchRemoteModel", []interface{}{artifact, remoteRepository})
	fake.fetchRemoteModelMutex.Unlock()
	if fake.FetchRemoteModelStub != nil {
		return fake.FetchRemoteModelStub(artifact, remoteRepository)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchRemoteModelReturns.result1, fake.fetchRemoteModelReturns.result2
}

func (fake *FakeRemoteRepository) FetchRemoteModelCallCount() int {
	fake.fetchRemoteModelMutex.RLock()
	defer fake.fetchRemoteModelMutex.RUnlock()
	return len(fake.fetchRemoteModelArgsForCall)
}

func (fake *FakeRemoteRepository) FetchRemoteModelArgsForCall(i int) (*maven.Artifact, string) {
	fake.fetchRemoteModelMutex.RLock()
	defer fake.fetchRemoteModelMutex.RUnlock()
	return fake.fetchRemoteModelArgsForCall[i].artifact, fake.fetchRemoteModelArgsForCall[i].remoteRepository
}

func (fake *FakeRemoteRepository) FetchRemoteModelReturns(result1 *maven.Artifact, result2 error) {
	fake.FetchRemoteModelStub = nil
	fake.fetchRemoteModelReturns = struct {
		result1 *maven.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoteRepository) FetchRemoteModelReturnsOnCall(i int, result1 *maven.Artifact, result2 error) {
	fake.FetchRemoteModelStub = nil
	if fake.fetchRemoteModelReturnsOnCall == nil {
		fake.fetchRemoteModelReturnsOnCall = make(map[int]struct {
			result1 *maven.Artifact
			result2 error
		})
	}
	fake.fetchRemoteModelReturnsOnCall[i] = struct {
		result1 *maven.Artifact
		result2 error
	}{result1, result2}
}

func (fake *FakeRemoteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchRemoteModelMutex.RLock()
	defer fake.fetchRemoteModelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRemoteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ maven.RemoteRepository = new(FakeRemoteRepository)
